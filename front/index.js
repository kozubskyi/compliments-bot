//* npm - node-telegram-bot-api

require('dotenv').config() // –ë–µ–∑ —ç—Ç–æ–≥–æ –∫–æ–¥–∞ –ø–µ—Ä–µ–¥ require("node-telegram-bot-api") –∏ NTBA_FIX_319 = 1 –≤ —Ñ–∞–π–ª–µ .env –≤—ã–¥–∞–µ—Ç –æ—à–∏–±–∫—É:
// node-telegram-bot-api deprecated Automatic enabling of cancellation of promises is deprecated. In the future, you will have to enable it yourself. See https://github.com/yagop/node-telegram-bot-api/issues/319. at node:internal/modules/cjs/loader:1105:14
// –†–µ—à–µ–Ω–∏–µ: https://github.com/yagop/node-telegram-bot-api/issues/540

const TelegramBot = require('node-telegram-bot-api')
const makeResponse = require('./make-response')

const bot = new TelegramBot(process.env.BOT_TOKEN, { polling: true })

function start() {
  bot.setMyCommands([
    // { command: "/start", description: "–ü–æ—á–∞—Ç–∏" },
    { command: '/compliment', description: '–û—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç' },
    { command: '/wish', description: '–û—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è' },
  ])

  bot.on('message', async (msg) => {
    // console.log({ msg })
    await makeResponse(bot, {
      firstName: msg.from.first_name,
      lastName: msg.from.last_name,
      username: msg.from.username,
      chatId: msg.chat.id,
      command: msg.text,
    })
    // msg = {
    //   message_id: 1,
    //   from: {
    //     id: 123456789, // equal to chat.id
    //     is_bot: false,
    //     first_name: "Name",
    //     last_name: "Surname",
    //     username: "nickname",
    //     language_code: "ru",
    //   },
    //   chat: {
    //     id: 123456789, // equal to from.id
    //     first_name: "Name",
    //     last_name: "Surname",
    //     username: "nickname",
    //     type: "private", // channel, group, private, supergroup
    //   },
    //   date: 1234567890, // don't know the format
    //   text: "user typed message",
    //   entities: [[Object]],
    // }
  })

  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª—ñ–∫–∞ –Ω–∞ –∫–Ω–æ–ø–∫—É (—è–∫—â–æ –≤–æ–Ω–∞ —î)
  // bot.on("callback_query", async (cbq) => {
  //   await makeResponse(bot, {
  //     firstName: cbq.from.first_name,
  //     lastName: cbq.from.last_name,
  //     username: cbq.from.username,
  //     chatId: cbq.message.chat.id,
  //     command: cbq.data,
  //   })
  // })

  // –û–±—Ä–æ–±–Ω–∏–∫ –æ—Ç—Ä–∏–º–∞–Ω–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, —è–∫–µ –ø–æ—á–∏–Ω–∞—î—Ç—å—Å—è –∑ "/creatortest"
  // bot.onText(/\/creatortest/, (msg, match) => {
  //   console.log({ msg, match })
  //   console.log('msg.entities', msg.entities)

  //   bot.sendMessage(msg.chat.id, '—Ä–æ–±–µ')
  // })
}
start()

/*

//* npm - telegraf

const { Telegraf } = require("telegraf")
const dotenv = require("dotenv")
const axios = require("axios")

dotenv.config()
const { BOT_TOKEN, KOZUBSKYI_CHAT_ID, LENA_RAK_CHAT_ID, DATADB_BASE_URL } = process.env

const bot = new Telegraf(BOT_TOKEN)

function start() {
  const sweet = "lena_rak_05"
  const creator = "kozubskyi"
  const sweetChatId = Number(LENA_RAK_CHAT_ID)
  const creatorChatId = Number(KOZUBSKYI_CHAT_ID)

  bot.on("text", async (ctx) => {
    const firstName = ctx.message.from.first_name
    const lastName = ctx.message.from.last_name
    const username = ctx.message.from.username
    const command = ctx.message.text
    const chatId = ctx.message.chat.id

    let response

    try {
      if (username === sweet) {
        if (command === "/start") {
          response =
            "–õ–µ–Ω—É—Å–∏–∫, –ø—Ä–∏–≤–µ—Ç–∏–∫) üòò –î–µ–Ω–∏—Å –ø—Ä–æ—Å–∏–ª –ø–µ—Ä–µ–¥–∞—Ç—å —Ç–µ–±–µ –∫—É—á—É –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫–æ–≤. –ù–∞–ø–∏—à–∏ –∏–ª–∏ –Ω–∞–∂–º–∏ /compliment –∏ –ø–æ–ª—É—á–∏—à—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫)"
        } else if (command === "/compliment") {
          const { data } = await axios.get(DATADB_BASE_URL)
          const randomIndex = Math.floor(Math.random() * data.length)

          response = data[randomIndex].text
        } else {
          response = "–Ø –ø–µ—Ä–µ–¥–∞–º –î–µ–Ω–∏—Å—É —Ç–æ, —á—Ç–æ —Ç—ã –Ω–∞–ø–∏—Å–∞–ª–∞) üòò"
        }
      } else if (username === creator) {
        const [adminCommand, newData] = separateCommand(command)

        if (adminCommand === "add") {
          await axios.post(DATADB_BASE_URL, { text: newData })

          response = "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω"
        } else if (adminCommand === "del") {
          await axios.delete(`${DATADB_BASE_URL}/${newData}`)

          response = "–ö–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω"
        } else if (adminCommand === "mlr") {
          ctx.telegram.sendMessage(sweetChatId, newData)

          response = "–°–æ–æ–±—â–µ–Ω–∏–µ –ª—é–±–∏–º–æ–π —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        } else if (adminCommand === "msg") {
          const [receiverChatId, text] = separateCommand(newData)

          ctx.telegram.sendMessage(Number(receiverChatId), text)
          response = "–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ"
        } else if (command === "/all") {
          const { data } = await axios.get(DATADB_BASE_URL)

          response = JSON.stringify(data)
        } else if (command === "/help") {
          response = `
        "add _" - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º _
        "del _" - —É–¥–∞–ª–∏—Ç—å –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫ —Å —Ç–µ–∫—Å—Ç–æ–º _
        "mlr _" - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –õ–µ–Ω–µ –†–∞–∫ —Å —Ç–µ–∫—Å—Ç–æ–º _
        "msg _ __" - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å id —á–∞—Ç–∞ _ –∏ —Ç–µ–∫—Å—Ç–æ–º __
        "/all" - –ø–æ–ª—É—á–∏—Ç—å –º–∞—Å—Å–∏–≤ –≤—Å–µ—Ö –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫–æ–≤
        `
        } else {
          response = "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞"
        }
      } else {
        if (command === "/start" || command === "/compliment") {
          response = "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –í—ã –Ω–µ –ï–ª–µ–Ω–∞ –†–∞–∫, –∞ –∫–æ–º–ø–ª–∏–º–µ–Ω—Ç–∏–∫–∏ —è –¥–µ–ª–∞—é —Ç–æ–ª—å–∫–æ –µ–π ü§∑‚Äç‚ôÇÔ∏è"
        } else {
          response = "–Ø –ø–µ—Ä–µ–¥–∞–º –î–µ–Ω–∏—Å—É —Ç–æ, —á—Ç–æ –í—ã –Ω–∞–ø–∏—Å–∞–ª–∏ üòâ"
        }
      }

      ctx.reply(response)

      username !== creator &&
        ctx.telegram.sendMessage(
          creatorChatId,
          `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${firstName} ${lastName} <${username}> (${chatId})" –æ—Ç–ø—Ä–∞–≤–∏–ª(-–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ "${command}" –∏ –ø–æ–ª—É—á–∏–ª(-–∞) –æ—Ç–≤–µ—Ç "${response}"`
        )
    } catch (err) {
      username !== creator && ctx.reply("–Ø –Ω–µ–º–Ω–æ–∂–∫–æ —Å–ª–æ–º–∞–ª—Å—è, —Å–∫–æ—Ä–æ –ø–æ—á–∏–Ω—é—Å—å –∏ –≤–µ—Ä–Ω—É—Å—å üë®‚Äçüîß‚öôÔ∏èüòä")

      ctx.telegram.sendMessage(
        creatorChatId,
        `‚ùå –û—à–∏–±–∫–∞! –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "${firstName} ${lastName} <${username}> (${chatId})" –æ—Ç–ø—Ä–∞–≤–∏–ª(-–∞) —Å–æ–æ–±—â–µ–Ω–∏–µ "${command}" –∏ –ø–æ–ª—É—á–∏–ª–∞—Å—å –æ—à–∏–±–∫–∞ "${err.message}"`
      )
    }
  })
}

start()

bot.launch()

// Enable graceful stop
process.once("SIGINT", () => bot.stop("SIGINT"))
process.once("SIGTERM", () => bot.stop("SIGTERM"))

function separateCommand(msg) {
  const msgArr = msg.split(" ")
  let data = msgArr[0]
  let text = msgArr.slice(1).join(" ")

  return [data, text]
}

*/
