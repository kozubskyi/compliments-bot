const axios = require('axios');
const { DB_BASE_URL } = process.env;

function getStartCmdResponse(status) {
  let response = null;

  if (status === 'sweet') {
    response =
      '–õ—î–Ω—É—Å—ñ–∫, –ø—Ä–∏–≤—ñ—Ç) üòò –î–µ–Ω–∏—Å –ø—Ä–æ—Å–∏–≤ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ç–æ–±—ñ –±–∞–≥–∞—Ç–æ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫—ñ–≤. –ù–∞–ø–∏—à–∏ –∞–±–æ –Ω–∞—Ç–∏—Å–Ω–∏ /compliment —ñ –æ—Ç—Ä–∏–º–∞—î—à—å –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫)';
  } else if (status === 'creator') {
    response =
      '–î–µ–Ω–∏—Å, –ø—Ä–∏–≤—ñ—Ç üòä –ø—Ä–∞—Ü—é—é –∫–æ—Ä–µ–∫—Ç–Ω–æ, –º–æ–∂–µ—à —Ü–µ –ø–µ—Ä–µ–≤—ñ—Ä–∏—Ç–∏ –≤—ñ–¥–ø—Ä–∞–≤–∏–≤—à–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º /compliment';
  } else {
    response =
      '–ü—Ä–∏–≤—ñ—Ç üòä –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç—É –∞–±–æ –ø–æ–±–∞–∂–∞–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤—Ç–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º /compliment';
  }

  return response;
}

async function getRandomCompliment(status) {
  let response = null;

  if (status) {
    response = await axios.get(`${DB_BASE_URL}/compliments/${status}`);
  } else {
    response = await axios.get(`${DB_BASE_URL}/compliments`);
  }
  const randomIndex = Math.floor(Math.random() * response.data.length);

  const chosenCompliment = response.data[randomIndex];
  const { _id, sentTimes } = chosenCompliment;

  await axios.patch(`${DB_BASE_URL}/compliments/${_id}`, { sentTimes: sentTimes + 1 });

  return chosenCompliment;
}

async function getComplimentCmdResponse(status) {
  let chosenCompliment = null;

  if (status === 'sweet' || status === 'creator') {
    chosenCompliment = await getRandomCompliment(status);
  } else {
    chosenCompliment = await getRandomCompliment('others');
  }

  return chosenCompliment.text;
}

function getElseResponse(status) {
  let response = null;

  if (status === 'sweet') response = '–Ø –ø–µ—Ä–µ–¥–∞–º –î–µ–Ω–∏—Å—É —Ç–µ, —â–æ —Ç–∏ –Ω–∞–ø–∏—Å–∞–ª–∞) üòò';
  else if (status === 'creator') response = '‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–º–∞–Ω–¥–∞';
  else response = '–Ø –ø–µ—Ä–µ–¥–∞–º –î–µ–Ω–∏—Å—É —Ç–µ, —â–æ –í–∏ –Ω–∞–ø–∏—Å–∞–ª–∏ üòâ';

  return response;
}

function separateCommand(msg) {
  const msgArr = msg.split(' ');
  const cmd = msgArr[0];
  const text = msgArr.slice(1).join(' ');

  return [cmd, text];
}

module.exports = {
  getStartCmdResponse,
  getComplimentCmdResponse,
  getElseResponse,
  separateCommand,
};
