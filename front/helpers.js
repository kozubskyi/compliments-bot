const axios = require('axios')
const { DB_BASE_URL } = process.env

function getStartCmdResponse({ firstName, status }) {
  let response = ''
  const buttons = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: 'üíù –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫', callback_data: '/compliment' }],
        [{ text: '‚ú® –ü–æ–±–∞–∂–∞–Ω–Ω—è—á–∫–æ', callback_data: '/wish' }],
        [
          { text: 'üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è', callback_data: '/start' },
          { text: '‚ùî –î–æ–ø–æ–º–æ–≥–∞', callback_data: '/help' },
        ],
      ],
    }),
  }

  if (status === 'sweet') {
    response =
      '–õ—î–Ω—É—Å—ñ–∫, –ø—Ä–∏–≤—ñ—Ç) üòä –î–µ–Ω–∏—Å –ø—Ä–æ—Å–∏–≤ –ø–µ—Ä–µ–¥–∞—Ç–∏ —Ç–æ–±—ñ –±–∞–≥–∞—Ç–æ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫—ñ–≤ —Ç–∞ –ø–æ–±–∞–∂–∞–Ω–Ω—è—á–æ–∫) ‚ò∫Ô∏è –ù–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫–Ω–æ–ø–∫—É, –∞–±–æ –Ω–∞–ø–∏—à–∏ /compliment —á–∏ /wish üòò'
  } else if (status === 'creator') {
    response = '–ü—Ä–∏–≤—ñ—Ç, —Ç–≤–æ—Ä–µ—Ü—å) –ø—Ä–∞—Ü—é—é –∫–æ—Ä–µ–∫—Ç–Ω–æ üòä'
  } else {
    response = `–ü—Ä–∏–≤—ñ—Ç, ${firstName} üëã –¥–ª—è –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –ø–æ–±–∞–∂–∞–Ω–Ω—è –Ω–∞—Ç–∏—Å–Ω–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∞–±–æ –≤—ñ–¥–ø—Ä–∞–≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º /wish üòä`
  }

  return { response, buttons }
}

async function getRandomMessage(type, status) {
  const { data } = await axios.get(`${DB_BASE_URL}/messages/${type}/${status}`)

  const randomIndex = Math.floor(Math.random() * data.length)

  const chosenMessage = data[randomIndex]
  const { _id, sendings } = chosenMessage

  await axios.patch(`${DB_BASE_URL}/messages/${_id}`, { sendings: sendings + 1 })

  return chosenMessage
}

async function getMessageResponse(status, type) {
  let response = ''
  const buttons = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [
          { text: 'üíù –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫', callback_data: '/compliment' },
          { text: '‚ú® –ü–æ–±–∞–∂–∞–Ω–Ω—è—á–∫–æ', callback_data: '/wish' },
        ],
      ],
    }),
  }

  if (status !== 'sweet' && type === 'compliment') {
    response = '–í–∏–±–∞—á, –∞–ª–µ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫–∏ —è —Ä–æ–±–ª—é –ª–∏—à–µ –û–ª–µ–Ω—ñ –†–∞–∫. –î–ª—è —É—Å—ñ—Ö —ñ–Ω—à–∏—Ö —è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø–æ–±–∞–∂–∞–Ω–Ω—è.'
  } else {
    const chosenMessage = await getRandomMessage(type, status)
    response = chosenMessage.text
  }

  return { response, buttons }
}

function getHelpCmdResponse(status) {
  let response = ''
  const buttons = {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: 'üíù –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫', callback_data: '/compliment' }],
        [{ text: '‚ú® –ü–æ–±–∞–∂–∞–Ω–Ω—è—á–∫–æ', callback_data: '/wish' }],
        [
          { text: 'üëã –ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è', callback_data: '/start' },
          { text: '‚ùî –î–æ–ø–æ–º–æ–≥–∞', callback_data: '/help' },
        ],
      ],
    }),
  }

  if (status === 'creator') {
    response = `üó£Ô∏è –ö–æ–º–∞–Ω–¥–∏

üíÅ‚Äç‚ôÇÔ∏è –°—Ç–∞–Ω–¥–∞—Ä—Ç—ñ:
/start - –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞
/compliment - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç –≤—ñ–¥ –±–æ—Ç–∞
/wish - –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞
/help - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –∫–æ–º–∞–Ω–¥

‚≠êÔ∏è –ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä—Å—å–∫—ñ:
add <type> <for> <text> - –¥–æ–¥–∞—Ç–∏ —É –±–∞–∑—É –¥–∞–Ω–∏—Ö –Ω–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ type: compliment/wish, for: sweet/creator/others —ñ –±—É–¥—å-—è–∫–∏–º —Ç–µ–∫—Å—Ç–æ–º <text>;
addmessages <array> - –¥–æ–¥–∞—Ç–∏ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö –º–∞—Å–∏–≤ –Ω–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å, –¥–µ –∫–æ–∂–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø–æ–≤–∏–Ω–Ω–æ –º—ñ—Å—Ç–∏—Ç–∏ { type, for, text }
del <text> - –≤–∏–¥–∞–ª–∏—Ç–∏ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ç–µ–∫—Å—Ç–æ–º <text>;
delallmessages - –≤–∏–¥–∞–ª–∏—Ç–∏ –≤—Å—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö (–Ω–µ —Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞–Ω–æ);
mlr <text> - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –û–ª–µ–Ω—ñ –†–∞–∫ –∑ —Ç–µ–∫—Å—Ç–æ–º <text>;
msg <chatId> <text> - –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—É –∑ chatId <chatId> —ñ —Ç–µ–∫—Å—Ç–æ–º <text>;
/users - –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Å–∏–≤ —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö;
/messages - –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Å–∏–≤ —É—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É —Ñ–æ—Ä–º–∞—Ç—ñ { type, for, text };
/compliments - –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Å–∏–≤ —É—Å—ñ—Ö –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç—ñ–≤ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É —Ñ–æ—Ä–º–∞—Ç—ñ { type: 'compliment', for, text };
/wishes - –æ—Ç—Ä–∏–º–∞—Ç–∏ –º–∞—Å–∏–≤ —É—Å—ñ—Ö –ø–æ–±–∞–∂–∞–Ω—å –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö —É —Ñ–æ—Ä–º–∞—Ç—ñ { type: 'wish', for, text };
/usersq - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å—ñ—Ö –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö;
/messagesq - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö;
/complimentsq - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å—ñ—Ö –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç—ñ–≤ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö;
/wishesq - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—Å—ñ—Ö –ø–æ–±–∞–∂–∞–Ω—å —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö;
/test - —Ç–µ—Å—Ç–æ–≤–∞ –∫–æ–º–∞–Ω–¥–∞.`
  } else {
    response = `üó£Ô∏è –ö–æ–º–∞–Ω–¥–∏

/start - –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞
/compliment - –æ—Ç—Ä–∏–º–∞—Ç–∏ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç –≤—ñ–¥ –±–æ—Ç–∞
/wish - –æ—Ç—Ä–∏–º–∞—Ç–∏ –ø–æ–±–∞–∂–∞–Ω–Ω—è –≤—ñ–¥ –±–æ—Ç–∞
/help - –æ—Ç—Ä–∏–º–∞—Ç–∏ —Å–ø–∏—Å–æ–∫ —É—Å—ñ—Ö –º–æ–∂–ª–∏–≤–∏—Ö –∫–æ–º–∞–Ω–¥
–¢–∞–∫–æ–∂ –º–æ–∂–µ—à –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—Å–∞—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è, –∞ —è –ø–µ—Ä–µ–¥–∞–º –π–æ–≥–æ –î–µ–Ω–∏—Å—É`
  }

  return { response, buttons }
}

function getElseResponse(status) {
  let response = ''

  if (status === 'sweet') response = '–Ø –ø–µ—Ä–µ–¥–∞–º –î–µ–Ω–∏—Å—É —Ç–µ, —â–æ —Ç–∏ –Ω–∞–ø–∏—Å–∞–ª–∞) üòò'
  else if (status === 'creator') response = '‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–º–∞–Ω–¥–∞'
  else response = '–Ø –ø–µ—Ä–µ–¥–∞–º –î–µ–Ω–∏—Å—É —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üòâ'

  return { response }
}

function separateFirstWord(msg) {
  const msgArr = msg.split(' ')
  const cmd = msgArr[0]
  const text = msgArr.slice(1).join(' ')

  return [cmd, text]
}

module.exports = {
  getStartCmdResponse,
  getMessageResponse,
  getHelpCmdResponse,
  getElseResponse,
  separateFirstWord,
}
