const axios = require('axios')
const { DB_BASE_URL } = process.env

async function getRandomMessage(type, status) {
  const { data } = await axios.get(`${DB_BASE_URL}/messages/${type}/${status}`)

  if (!data.length) {
    const variants = { compliment: '–∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫—ñ–≤', wish: '–ø–æ–±–∞–∂–∞–Ω–Ω—è—á–æ–∫' }

    return { text: `–ù–∞–∂–∞–ª—å –ø–æ–∫–∏ —â–æ —è –Ω–µ –º–∞—é ${variants[type]}, –≤–∏–±–∞—á üò•` }
  }

  const randomIndex = Math.floor(Math.random() * data.length)

  const chosenMessage = data[randomIndex]
  const { _id, sendings } = chosenMessage

  await axios.patch(`${DB_BASE_URL}/messages/${_id}`, { sendings: sendings + 1 })

  return chosenMessage
}

module.exports = async function handleComplimentOrWishCommand(status, type) {
  let response = ''
  let buttons = {
    reply_markup: JSON.stringify({
      inline_keyboard: [[{ text: '‚ú® –ü–æ–±–∞–∂–∞–Ω–Ω—è', callback_data: '/wish' }]],
    }),
  }

  if (status !== 'sweet' && type === 'compliment') {
    response = '–í–∏–±–∞—á, –∞–ª–µ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏ —è —Ä–æ–±–ª—é –ª–∏—à–µ –û–ª–µ–Ω—ñ –†–∞–∫. –î–ª—è —É—Å—ñ—Ö —ñ–Ω—à–∏—Ö —è –≤—ñ–¥–ø—Ä–∞–≤–ª—è—é –ø–æ–±–∞–∂–∞–Ω–Ω—è.'
  } else {
    const { text } = await getRandomMessage(type, status)
    response = text

    if (status === 'sweet') {
      buttons = {
        reply_markup: JSON.stringify({
          inline_keyboard: [
            [
              { text: 'üíù –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫', callback_data: '/compliment' },
              { text: '‚ú® –ü–æ–±–∞–∂–∞–Ω–Ω—è—á–∫–æ', callback_data: '/wish' },
            ],
          ],
        }),
      }
    }
  }

  return { response, buttons }
}
