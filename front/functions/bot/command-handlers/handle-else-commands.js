const axios = require('axios');
const { DB_BASE_URL } = process.env;
const { SWEET_CHAT_ID } = require('../helpers/chat-ids');

function separateFirstWord(msg) {
  const msgArr = msg.split(' ');
  const cmd = msgArr[0];
  const text = msgArr.slice(1).join(' ');

  return [cmd, text];
}

async function handleCreatorCommands(ctx, value) {
  let reply = '';

  const [command, rest] = separateFirstWord(value);

  if (command === 'add') {
    const { data } = await axios.post(`${DB_BASE_URL}/compliments`, { text: rest });

    reply = `‚úÖ –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫ –¥–æ–¥–∞–Ω–æ –≤ –±–∞–∑—É –¥–∞–Ω–∏—Ö: ${JSON.stringify(data)}`;
  } else if (command === 'show') {
    const { data } = await axios.get(`${DB_BASE_URL}/compliments/${rest}`);

    reply = JSON.stringify(data);
  } else if (command === 'del') {
    const [key, idOrText] = separateFirstWord(rest);

    const { data } = await axios.delete(`${DB_BASE_URL}/compliments/${key}/${idOrText}`);

    if (data) {
      reply = `‚úÖ –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫ —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö: ${JSON.stringify(data)}`;
    } else {
      reply = '‚ÑπÔ∏è –¢–∞–∫–æ–≥–æ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫–∞ —ñ –Ω–µ –±—É–ª–æ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö';
    }
  } else if (command === 'upd') {
    const [id, fieldAndNewValue] = separateFirstWord(rest);
    const [field, newValue] = separateFirstWord(fieldAndNewValue);

    const { data } = await axios.patch(`${DB_BASE_URL}/compliments/${id}`, {
      [field]: JSON.parse(newValue),
    });

    if (data) {
      reply = `‚úÖ –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫ —É—Å–ø—ñ—à–Ω–æ –æ–Ω–æ–≤–ª–µ–Ω–æ —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö: ${JSON.stringify(data)}`;
    } else {
      reply = `‚ö†Ô∏è –ö–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫–∞ –∑ id ${id} –Ω–µ–º–∞—î –≤ –±–∞–∑—ñ –¥–∞–Ω–∏—Ö`;
    }
  } else if (command === 'mlr') {
    await ctx.telegram.sendMessage(SWEET_CHAT_ID, rest);

    reply = '‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –õ—î–Ω—É—Å—ñ—á–∫—î –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ';
  } else if (command === 'msg') {
    const [name, surnameAndText] = separateFirstWord(rest);
    const [surname, text] = separateFirstWord(surnameAndText);

    const { data } = await axios.get(`${DB_BASE_URL}/users/${name}/${surname}`);

    if (data) {
      await ctx.telegram.sendMessage(data.chatId, text);
      reply = '‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ';
    } else {
      reply = '‚ö†Ô∏è –¢–∞–∫–æ–≥–æ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–º–∞—î —É –±–∞–∑—ñ –¥–∞–Ω–∏—Ö';
    }
  } else if (value === 'delallcompliments') {
    await axios.delete(`${DB_BASE_URL}/compliments`);

    reply = '‚úÖ –í—Å—ñ –∫–æ–º–ø–ª—ñ–º–µ–Ω—Ç–∏–∫–∏ –≤–∏–¥–∞–ª–µ–Ω–æ –∑ –±–∞–∑–∏ –¥–∞–Ω–∏—Ö';
  } else if (value === '/users') {
    const { data } = await axios.get(`${DB_BASE_URL}/users`);

    reply = JSON.stringify(data);
  } else if (value === '/compliments') {
    const { data } = await axios.get(`${DB_BASE_URL}/compliments`);

    reply = JSON.stringify(data.map(({ _id, text }) => `${_id} ${text}`));
  } else if (value === '/usersq') {
    const { data } = await axios.get(`${DB_BASE_URL}/users`);

    reply = `${data.length}`;
  } else if (value === '/complimentsq') {
    const { data } = await axios.get(`${DB_BASE_URL}/compliments`);

    reply = `${data.length}`;
  } else if (value === '/sendingsreset') {
    await axios.patch(`${DB_BASE_URL}/compliments/sendings/reset`);

    reply = '‚úÖ –ü–æ–ª–µ sendings —É—Å—ñ—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å —É—Å–ø—ñ—à–Ω–æ —Å–∫–∏–Ω—É—Ç–æ –¥–æ 0';
  } else if (value === '/test') {
    reply = '‚úÖ';
  } else {
    reply = '‚ö†Ô∏è –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ –∫–æ–º–∞–Ω–¥–∞';
  }

  return reply;
}

module.exports = async function handleElseCommands(ctx, status, value) {
  let reply = '';

  if (status === 'creator') {
    reply = await handleCreatorCommands(ctx, value);
  } else if (status === 'sweet') {
    reply = '–Ø –ø–µ—Ä–µ–¥–∞–º –î–µ–Ω–∏—Å—É —Ç–µ, —â–æ —Ç–∏ –Ω–∞–ø–∏—Å–∞–ª–∞) üòò';
  } else {
    reply = '–Ø –ø–µ—Ä–µ–¥–∞–º –î–µ–Ω–∏—Å—É —Ü–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è üòâ';
  }

  return reply;
};
